{"version":3,"sources":["assets/githubBg.svg","styles/global.ts","pages/Dashboard/styles.ts","assets/logo.svg","services/api.tsx","pages/Dashboard/index.tsx","pages/Repository/styles.ts","pages/Repository/index.tsx","routes/index.tsx","App.tsx","index.tsx"],"names":["createGlobalStyle","githubBackground","Title","styled","h1","Form","form","props","hasError","css","shade","Error","span","Repositories","div","api","axios","create","baseURL","Dashboard","useState","newRepo","setNewRepo","inputError","setInputError","storagedRepositories","localStorage","getItem","JSON","parse","repositories","setRepositories","event","a","preventDefault","get","response","repository","data","useEffect","setItem","stringify","src","logoImg","alt","onSubmit","value","onChange","e","target","placeholder","type","map","to","full_name","owner","avatar_url","login","description","size","Header","header","RepositoryInfo","section","Issues","Repository","params","useRouteMatch","setRepository","issues","setIssues","apiError","setApiError","then","catch","err","message","stargazers_count","forks_count","open_issues_count","issue","href","html_url","rel","title","user","id","Routes","path","exact","component","App","basename","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.186e7703.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/githubBg.7fa45dda.svg\";","import { createGlobalStyle } from 'styled-components';\n\nimport githubBackground from '../assets/githubBg.svg';\n\nexport default createGlobalStyle`\n  * {\n    margin:0;\n    padding: 0;\n    outline: 0;\n    box-sizing: border-box;\n  }\n\n  body {\n    background: #f0f0f5 url(${githubBackground}) no-repeat 70% top;\n    -webkit-font-smoothing: antialiased;\n  }\n\n  body, input, button {\n    font: 16px Roboto, sans-serif;\n  }\n\n  #root {\n    max-width: 960px;\n    margin: 0 auto;\n    padding: 40px 20px;\n  }\n\n  button {\n    cursor: pointer;\n  }\n\n`;\n","import styled, { css } from 'styled-components';\nimport { shade } from 'polished';\n\ninterface FormProps {\n  hasError: boolean;\n}\n\nexport const Title = styled.h1`\n  font-size: 48px;\n  color: #3a3a3a;\n  max-width: 450px;\n  line-height: 56px;\n\n  margin-top: 80px;\n`;\n\nexport const Form = styled.form<FormProps>`\n  margin-top: 40px;\n  max-width: 700px;\n\n  display: flex;\n\n  input {\n    flex: 1;\n    height: 70px;\n    padding: 0 24px;\n    border: 0;\n    border-radius: 5px 0 0 5px;\n    color: #3a3a3a;\n    border: 2px solid #fff;\n    border-right: 0;\n\n    &::placeholder {\n      color: #a8a8b3;\n    }\n\n    ${props =>\n      props.hasError &&\n      css`\n        border-color: #c53030;\n      `}\n  }\n\n  button {\n    width: 210px;\n    height: 70px;\n    background: #04d361;\n    border-radius: 0 5px 5px 0;\n    border: 0;\n    color: #fff;\n    font-weight: bold;\n    transition: background-color 0.2s;\n\n    &:hover {\n      background: ${shade(0.2, '#04d361')};\n    }\n  }\n`;\n\nexport const Error = styled.span`\n  display: block;\n  color: #c53030;\n  margin-top: 8px;\n`;\n\nexport const Repositories = styled.div`\n  margin-top: 80px;\n  max-width: 700px;\n\n  a {\n    background: #fff;\n    border-radius: 5px;\n    width: 100%;\n    padding: 24px;\n    display: block;\n    text-decoration: none;\n\n    display: flex;\n    align-items: center;\n\n    transition: transform 0.2s;\n\n    &:hover {\n      transform: translateX(10px);\n    }\n\n    & + a {\n      margin-top: 16px;\n    }\n\n    img {\n      width: 64px;\n      height: 64px;\n      border-radius: 50%;\n    }\n\n    div {\n      margin-left: 16px;\n\n      strong {\n        font-size: 20px;\n        color: #3d3d4d;\n      }\n\n      p {\n        font-size: 18px;\n        color: #a8a8b3;\n        margin-top: 4px;\n      }\n    }\n\n    svg {\n      margin-left: auto;\n      color: #cbcbd6;\n    }\n  }\n`;\n","export default __webpack_public_path__ + \"static/media/logo.469cc31b.svg\";","import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'https://api.github.com',\n});\n\nexport default api;\n","import React, { FormEvent, useState, useEffect } from 'react';\nimport { FiChevronRight } from 'react-icons/fi';\nimport { Link } from 'react-router-dom';\nimport { Form, Title, Repositories, Error } from './styles';\n\nimport logoImg from '../../assets/logo.svg';\n\nimport api from '../../services/api';\n\ninterface Repository {\n  full_name: string;\n  description: string;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n}\n\nconst Dashboard: React.FC = () => {\n  const [newRepo, setNewRepo] = useState('');\n  const [inputError, setInputError] = useState('');\n  const [repositories, setRepositories] = useState<Repository[]>(() => {\n    const storagedRepositories = localStorage.getItem(\n      '@GithubExplorer:repositories',\n    );\n    return storagedRepositories ? JSON.parse(storagedRepositories) : [];\n  });\n\n  useEffect(() => {\n    localStorage.setItem(\n      '@GithubExplorer:repositories',\n      JSON.stringify(repositories),\n    );\n  }, [repositories]);\n\n  async function handleAddRepository(\n    event: FormEvent<HTMLFormElement>,\n  ): Promise<void> {\n    event.preventDefault();\n\n    if (!newRepo) {\n      setInputError('Digite o autor/nome do repositório');\n      return;\n    }\n\n    try {\n      const response = await api.get<Repository>(`repos/${newRepo}`);\n\n      const repository = response.data;\n\n      setRepositories([...repositories, repository]);\n\n      setNewRepo('');\n      setInputError('');\n    } catch {\n      setInputError('Repositório não encontrado');\n    }\n  }\n\n  return (\n    <>\n      <img src={logoImg} alt=\"Github Explorer\" />\n      <Title>Explore repositórios no Github</Title>\n\n      <Form hasError={!!inputError} onSubmit={handleAddRepository}>\n        <input\n          value={newRepo}\n          onChange={e => setNewRepo(e.target.value)}\n          placeholder=\"Digite o nome do repositório\"\n        />\n        <button type=\"submit\">Pesquisar</button>\n      </Form>\n\n      {inputError && <Error>{inputError}</Error>}\n\n      <Repositories>\n        {repositories.map(repository => (\n          <Link\n            key={repository.full_name}\n            to={`repositories/${repository.full_name}`}\n          >\n            <img\n              src={repository.owner.avatar_url}\n              alt={repository.owner.login}\n            />\n            <div>\n              <strong>{repository.full_name}</strong>\n              <p>{repository.description}</p>\n            </div>\n\n            <FiChevronRight size={20} />\n          </Link>\n        ))}\n      </Repositories>\n    </>\n  );\n};\n\nexport default Dashboard;\n","import styled from 'styled-components';\n\nexport const Header = styled.header`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  a {\n    display: flex;\n    align-items: center;\n    text-decoration: none;\n    color: #a8a8b3;\n    transition: color 0.2s;\n\n    &:hover {\n      color: #666;\n    }\n\n    svg {\n      margin-right: 4px;\n    }\n  }\n`;\n\nexport const RepositoryInfo = styled.section`\n  margin-top: 80px;\n\n  header {\n    display: flex;\n    align-items: center;\n\n    img {\n      width: 120px;\n      height: 120px;\n      border-radius: 50%;\n    }\n\n    div {\n      margin-left: 24px;\n\n      strong {\n        font-size: 36px;\n        color: #3d3d4d;\n      }\n\n      p {\n        font-size: 18px;\n        color: #737380;\n        margin-top: 4px;\n      }\n    }\n  }\n\n  ul {\n    display: flex;\n    list-style: none;\n    margin-top: 40px;\n\n    li {\n      & + li {\n        margin-left: 80px;\n      }\n\n      strong {\n        display: block;\n        font-size: 36px;\n        color: #3d3d4d;\n      }\n\n      span {\n        display: block;\n        margin-top: 4px;\n        color: #6c6c80;\n      }\n    }\n  }\n`;\n\nexport const Issues = styled.div`\n  margin-top: 80px;\n\n  a {\n    background: #fff;\n    border-radius: 5px;\n    width: 100%;\n    padding: 24px;\n    display: block;\n    text-decoration: none;\n\n    display: flex;\n    align-items: center;\n\n    transition: transform 0.2s;\n\n    &:hover {\n      transform: translateX(10px);\n    }\n\n    & + a {\n      margin-top: 16px;\n    }\n\n    div {\n      margin-left: 16px;\n\n      strong {\n        font-size: 20px;\n        color: #3d3d4d;\n      }\n\n      p {\n        font-size: 18px;\n        color: #a8a8b3;\n        margin-top: 4px;\n      }\n    }\n\n    svg {\n      margin-left: auto;\n      color: #cbcbd6;\n    }\n  }\n`;\n\nexport const Error = styled.span`\n  display: block;\n  color: #c53030;\n  margin-top: 8px;\n`;\n","import React, { useEffect, useState } from 'react';\nimport { FiChevronLeft, FiChevronRight } from 'react-icons/fi';\nimport { Link, useRouteMatch } from 'react-router-dom';\nimport { Header, Issues, RepositoryInfo, Error } from './styles';\n\nimport logoImg from '../../assets/logo.svg';\nimport api from '../../services/api';\n\ninterface RepositoryParams {\n  repository: string;\n}\n\ninterface Repository {\n  full_name: string;\n  description: string;\n  stargazers_count: number;\n  forks_count: number;\n  open_issues_count: number;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n}\n\ninterface Issue {\n  id: number;\n  title: string;\n  html_url: string;\n  user: {\n    login: string;\n  };\n}\n\nconst Repository: React.FC = () => {\n  const { params } = useRouteMatch<RepositoryParams>();\n\n  const [repository, setRepository] = useState<Repository | null>(null);\n  const [issues, setIssues] = useState<Issue[]>([]);\n  const [apiError, setApiError] = useState<string>('');\n\n  useEffect(() => {\n    // ### DISPARA TUDO JUNTO E CADA UM EXECUTA SUA RESPOSTA SEPARADAMENTE\n    api\n      .get(`repos/${params.repository}`)\n      .then(response => setRepository(response.data as Repository))\n      .catch(err => setApiError(err.message));\n\n    api\n      .get(`repos/${params.repository}/issues`)\n      .then(response => setIssues(response.data as Issue[]))\n      .catch(err => setApiError(err.message));\n\n    // ### DISPARA TUDO JUNTO E CONTINUA QUANDO TUDO CHEGAR ######\n    // async function loadData(): Promise<void> {\n    //   const [repository, issues] = await Promise.all([\n    //     api.get(`repos/${params.repository}`),\n    //     api.get(`repos/${params.repository}/issues`),\n    //   ]);\n    //   console.log(repository);\n    //   console.log(issues);\n    // }\n    // loadData();\n  }, [params.repository]);\n\n  return (\n    <>\n      <Header>\n        <img src={logoImg} alt=\"Github Explorer\" />\n        <Link to=\"/\">\n          <FiChevronLeft size={16} />\n          Voltar\n        </Link>\n      </Header>\n\n      {repository && (\n        <RepositoryInfo>\n          <header>\n            <img\n              // src={repository ? repository.owner.avatar_url : null}\n              src={repository?.owner.avatar_url}\n              alt={repository.owner.login}\n            />\n            <div>\n              <strong>{repository.full_name}</strong>\n              <p>{repository.description}</p>\n            </div>\n          </header>\n          <ul>\n            <li>\n              <strong>{repository.stargazers_count}</strong>\n              <span>Stars</span>\n            </li>\n            <li>\n              <strong>{repository.forks_count}</strong>\n              <span>Forks</span>\n            </li>\n            <li>\n              <strong>{repository.open_issues_count}</strong>\n              <span>Issues abertas</span>\n            </li>\n          </ul>\n        </RepositoryInfo>\n      )}\n\n      <Issues>\n        {issues.map(issue => (\n          <a\n            key={issue.id}\n            href={issue.html_url}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            <div>\n              <strong>{issue.title}</strong>\n              <p>{issue.user.login}</p>\n            </div>\n\n            <FiChevronRight size={20} />\n          </a>\n        ))}\n      </Issues>\n\n      {apiError ? <Error>{apiError}</Error> : <p>Carregando</p>}\n    </>\n  );\n};\n\nexport default Repository;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Dashboard from '../pages/Dashboard';\nimport Repository from '../pages/Repository';\n\nconst Routes: React.FC = () => (\n  <Switch>\n    <Route path=\"/\" exact component={Dashboard} />\n    <Route path=\"/repositories/:repository+\" exact component={Repository} />\n  </Switch>\n);\n\nexport default Routes;\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport GlobalStyle from './styles/global';\nimport Routes from './routes';\n\nfunction App() {\n  return (\n    <>\n      <BrowserRouter basename=\"gostack_github_explorer\">\n        <Routes />\n      </BrowserRouter>\n      <GlobalStyle />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}